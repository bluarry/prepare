#include <bits/stdc++.h>

using namespace std;

/*n个骰子的点数*/
class Solution1 {
public:
    int g_max=6;
    int N;
    void helper(int m,int sum,vector<int> &times){
        if(m==1){
            times[sum-N]++;
        }else{
            for(int i=1;i<=g_max;i++){
                helper(m-1,sum+i,times);
            }
        }
    }
    void help(vector<int> &times){
        for(int i=1;i<=g_max;i++){
            helper(N,i,times);
        }
    }
    vector<double> twoSum(int n) {
        vector<double> v;
        if(n<1){
            return v;
        }else{
            N=n;
        }

        int maxsum=g_max*N;
        vector<int> times(maxsum-N+1,0);

        help(times);
        int total=(int)pow(g_max,N);
        for(int i=N;i<=maxsum;i++){
            v.push_back((double)times[i-N]/total);
        }

        return v;
    }
};


class Solution2 {
public:
    int g_max=6;
    vector<double> twoSum(int n) {
        vector<double> v;
        if(n<1){
            return v;
        }
        vector<vector<int> > times(2,vector<int>(n*g_max+1,0));
        int flag=0;
        for(int i=1;i<=g_max;i++){
            times[flag][i]=1;
        }
        for(int k=2;k<=n;k++){
            for(int i=0;i<k;i++){
                times[1-flag][i]=0;
            }
            for(int i=k;i<=g_max*k;i++){
                times[1-flag][i]=0;
                for(int j=1;j<=i && j<=g_max;j++){
                    times[1-flag][i]+=times[flag][i-j];
                }
            }
            flag=1-flag;
        }

        int total=(int)pow(g_max,n);
        for(int i=n;i<=n*g_max;i++){
            v.push_back((double)times[flag][i]/total);
        }
        return v;
    }
};
class Solution {
public:
    vector<vector<double> > ans={
        {0.0},
        {0.166667,0.166667,0.166667,0.166667,0.166667,0.166667,},
        {0.0277778,0.0555556,0.0833333,0.111111,0.138889,0.166667,0.138889,0.111111,0.0833333,0.0555556,0.0277778,},
        {0.00462963,0.0138889,0.0277778,0.0462963,0.0694444,0.0972222,0.115741,0.125,0.125,0.115741,0.0972222,0.0694444,0.0462963,0.0277778,0.0138889,0.00462963,},
        {0.000771605,0.00308642,0.00771605,0.0154321,0.0270062,0.0432099,0.0617284,0.0802469,0.0964506,0.108025,0.112654,0.108025,0.0964506,0.0802469,0.0617284,0.0432099,0.0270062,0.0154321,0.00771605,0.00308642,0.000771605,},
        {0.000128601,0.000643004,0.00192901,0.00450103,0.00900206,0.0162037,0.0263632,0.0392233,0.0540123,0.0694444,0.0837191,0.0945216,0.100309,0.100309,0.0945216,0.0837191,0.0694444,0.0540123,0.0392233,0.0263632,0.0162037,0.00900206,0.00450103,0.00192901,0.000643004,0.000128601,},
        {2.14335e-05,0.000128601,0.000450103,0.00120027,0.00270062,0.00540123,0.00977366,0.0162037,0.0248843,0.0357082,0.048161,0.061214,0.0735382,0.0837191,0.0904707,0.0928498,0.0904707,0.0837191,0.0735382,0.061214,0.048161,0.0357082,0.0248843,0.0162037,0.00977366,0.00540123,0.00270062,0.00120027,0.000450103,0.000128601,2.14335e-05,},
        {3.57225e-06,2.50057e-05,0.000100023,0.000300069,0.000750171,0.00165038,0.00327575,0.00595493,0.0100273,0.0157786,0.0233553,0.0326575,0.0432849,0.0545375,0.0654685,0.0749921,0.0820438,0.0857946,0.0857946,0.0820438,0.0749921,0.0654685,0.0545375,0.0432849,0.0326575,0.0233553,0.0157786,0.0100273,0.00595493,0.00327575,0.00165038,0.000750171,0.000300069,0.000100023,2.50057e-05,3.57225e-06,},
        {5.95374e-07,4.76299e-06,2.14335e-05,7.14449e-05,0.000196473,0.000471536,0.0010169,0.00200522,0.00365977,0.00623952,0.010007,0.0151749,0.0218431,0.0299402,0.0391804,0.0490493,0.0588307,0.0676869,0.0747719,0.0793562,0.0809435,0.0793562,0.0747719,0.0676869,0.0588307,0.0490493,0.0391804,0.0299402,0.0218431,0.0151749,0.010007,0.00623952,0.00365977,0.00200522,0.0010169,0.000471536,0.000196473,7.14449e-05,2.14335e-05,4.76299e-06,5.95374e-07,},
        {9.9229e-08,8.93061e-07,4.46531e-06,1.63728e-05,4.91184e-05,0.000127708,0.000297092,0.000630501,0.00123689,0.0022649,0.0039,0.00635056,0.00982159,0.0144774,0.0203975,0.0275325,0.0356698,0.0444218,0.0532432,0.0614792,0.0684398,0.0734909,0.0761478,0.0761478,0.0734909,0.0684398,0.0614792,0.0532432,0.0444218,0.0356698,0.0275325,0.0203975,0.0144774,0.00982159,0.00635056,0.0039,0.0022649,0.00123689,0.000630501,0.000297092,0.000127708,4.91184e-05,1.63728e-05,4.46531e-06,8.93061e-07,9.9229e-08,},
        {1.65382e-08,1.65382e-07,9.09599e-07,3.6384e-06,1.18248e-05,3.31094e-05,8.26082e-05,0.000187543,0.000392947,0.000767702,0.00140952,0.00244666,0.00403407,0.00634189,0.00953533,0.0137466,0.0190416,0.0253868,0.0326237,0.0404573,0.0484644,0.0561241,0.0628704,0.0681581,0.0715327,0.0726928,0.0715327,0.0681581,0.0628704,0.0561241,0.0484644,0.0404573,0.0326237,0.0253868,0.0190416,0.0137466,0.00953533,0.00634189,0.00403407,0.00244666,0.00140952,0.000767702,0.000392947,0.000187543,8.26082e-05,3.31094e-05,1.18248e-05,3.6384e-06,9.09599e-07,1.65382e-07,1.65382e-08,},
        {2.75636e-09,3.032e-08,1.8192e-07,7.8832e-07,2.75912e-06,8.27735e-06,2.20426e-05,5.32722e-05,0.000118612,0.000245956,0.000478904,0.000881162,0.00153974,0.00256546,0.0040892,0.00625234,0.00919102,0.0130144,0.0177793,0.0234652,0.0299534,0.0370163,0.0443211,0.0514497,0.0579345,0.0633071,0.0671518,0.0691575,0.0691575,0.0671518,0.0633071,0.0579345,0.0514497,0.0443211,0.0370163,0.0299534,0.0234652,0.0177793,0.0130144,0.00919102,0.00625234,0.0040892,0.00256546,0.00153974,0.000881162,0.000478904,0.000245956,0.000118612,5.32722e-05,2.20426e-05,8.27735e-06,2.75912e-06,7.8832e-07,1.8192e-07,3.032e-08,2.75636e-09,},
    };
    vector<double> twoSum(int n) {
        vector<double> v;
        if(n<1){
            return v;
        }
        return ans[n];
    }
};
int main(){
    //freopen("out.txt","w",stdout);
    Solution s;
    vector<vector<double> > ans;
    for(int i=1;i<=11;i++){
        auto a=s.twoSum(i);
        ans.push_back(a);
    }
    for(auto x : ans){
        cout << "{";
        for(auto xx: x){
            cout << xx << ",";
        }
        cout << "},"<<endl;
    }

    return 0;
}